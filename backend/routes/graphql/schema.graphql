#import ./types.graphql
#import ./categories.graphql
#import ./user.graphql
#import ./posts.graphql

type Query {
    ## Users ##
    # the current auth user (dont forget to provide auth header)
    me: User @auth
    users: [User!]! @paginate(type: "paginator" model: "User")
    user(id: ID @eq): User @find

    ## Posts ##
    post(id: ID @eq): Post @find
    allPosts: [Post!]! @paginate(type: "paginator" scopes: ["OrderByDESC"])

    ## Categories ##
    category(id: ID @eq): Category @find
    rootCategories: [Category!]! @field(resolver: "CategoriesQuery@getRoots")

    ## Tags ##
    tags: [Tag!]! @all # (category_id: [Int] @in)
}

type Mutation {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
    ): User @create(model: "User")
    createPost(
        title: String @rules(apply: ["required"])
        content: String @rules(apply: ["required"])
        user_id: ID @rules(apply: ["required"])
    ): Post @create
    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "User")
    deleteUser(
        id: ID @rules(apply: ["required"])
    ): User @delete(model: "User")
}

type Comment {
    id: ID!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    content: String!
    ratingValue: Int! @rename(attribute: "rating_value")
    ratingValuePositive: Int! @rename(attribute: "rating_value_positive")
    ratingValueNegative: Int! @rename(attribute: "rating_value_negative")

    # Relations
    user: User! @belongsTo
    post: Post! @belongsTo
    repliedComment: Comment! @belongsTo
    repliesComments: [Comment]! @hasMany(type: "paginator")
}

type Tag {
    id: ID!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    name: String!
    about: String!
    postsCount: Int! @rename(attribute: "posts_count")

    # Relations
    category: Category! @belongsTo
}

type RatingInfo {
    value: Int!
}


